镜像原理：联合文件系统(UnionFS[file system][一层套一层])


容器数据卷[持久化][相当于U盘,独立与容器]:
    卷就是目录或文件,存在与一个或多个容器中,由docker挂载到容器，
    但不属于联合文件系统,因此能够绕过UnionFS提供的一些用于存储或共享数据的特性
    卷的设计目的就是持久化,完全独立与容器的生存周期,因此docker不会在容器删除时删除其挂载的容器数据卷

    特点：
        1.数据卷可在容器之间共享或重用数据
        2.卷中的更改可以直接生效
        3.数据卷中的更改不会包含在镜像的更新中？？？
        4.数据卷的生命周期一直持续到没有容器使用它为止

    添加方式：
        1 直接命令添加
            不带权限
                docker run -it  -v /宿主机的据对路径:/容器内目录 镜像名   #docker run it 镜像id 开启容器命令 -v 卷的缩写 volumes
                运行完后会在宿主机和容器内新建相应的文件 数据共享[操作任意一个文件夹相互都可以看到效果]
                关闭容器后 操作宿主机是否会看到效果?会 类似与Redis的持久化机制 重启后会进行一次全量数据的同步拉取
            带权限
                docker run -it  -v /宿主机的据对路径:/容器内目录:ro 镜像名  #ro:只读read only
        2 DockerFile添加
            参考 ./2.dockerFile创建容器卷




数据卷容器 volumes-from
    命名的容器挂载数据卷,其他容器通过挂载这个(父容器)实现数据共享,挂载数据卷的容器,称之为数据卷容器  #活动硬盘(数据卷容器)上挂活动硬盘(其他容器) 实现数据的传递依赖

    类似以下结构 实现数据传递的依赖性(类似与redis的主从复制)
    -----老师电脑------｜
                      ｜班长U盘(数据卷容器)---------｜
                                                 ｜---1组组长U盘(以班长镜像产生的)
                                                 ｜
                                                 ｜---2组组长U盘
                                                 ｜
                                                 ｜---3组组长U盘
    docker如何实现容器父子关系
            docker run -it doc02 --volumes-from doc01 镜像名称

结论:容器之间配置信息的传递,容器卷的生命周期一直持续到没有容器使用它为止
    删除有依赖关系的哪个都无所谓