docker ps 找到zk进程
dicker exec -it 进程号 /bin/bash
进入bin目录
    验证运行状况:zkServer.sh status
    运行客户端 ：zkCli.sh -server localhost:2181

特点：
    1 集群:1个leader 多个Follower
    2 集群中只要有半数以上节点存活,zk集群就能正常服务  #大于半数才行 eg:4挂2不行
    3 全局数据一致 每个server保存一份相同的数据副本,client无论连接到哪个Server,数据都是一致的
        #是否存在备份过多数据过大的问题 不存在,因为存储的数据是一些核心的配置之类的数据,并不存储数据
    4 更新请求顺序执行,来自同一个Client的请求按其发送顺序依次执行
    5 数据更新的原子性,一次数据更新要么全部成功,要么全部失败
    6 实时性,在一定时间范围内,客户端能读到最新的数据  #(时间范围短[因为数据非常小(一些核心数据)])

数据结构:
    树形结构(与Unix文件系统类似)
    每个节点称作ZNode,默认存储1MB数据,每个ZNode都可以通过其路径唯一标识


应用场景:
    0 统一命名服务
            www.baidu.com  -- ｜
                              ｜-----服务地址(ip)1
                              ｜-----服务地址(ip)2
                              ｜-----服务地址(ip)3
                              ｜-----服务地址(ip)4

    1 节点状态 绑定在ZNode上 其他服务监听这个节点 一旦状态发生改变就通知其他节点
    2 统一配置管理(分布式场景下同步配置信息)  绑定在ZNode 客户端做监听
    3 服务其动态上下线 服务启动时去注册(创建的都是临时节点)   客户端获取当前在线服务列表,并且注册监听 服务列表发生变化 客户端会收到通知
        订单服务(客户端监听) -- ｜
                             ｜-----服务1(上线或下线)
                             ｜-----服务2(上线或下线)
                             ｜-----服务3(上线或下线)
                             ｜-----服务4(上线或下线)
    4 软负载均衡
        zk中记录每台服务器的访问数,让访问数最少的服务器去处理最新的客户端请求

配置参数解读:https://www.cnblogs.com/xiohao/p/5541093.html
    dataDir=/....
    tickTime=2000    #2000ms 2s 一个心跳
    initLimit=10     #启动初始化延时:10个心跳时间 10*2s 最大延迟时间  #Leader 与 Flower 连接时间 如果超过这个时间就认为是连不上了 #启动的时候 耗时 延时设置的长
    ...


内部原理:
    选举机制:(投票)半数机制(半数以上机器存活,集群可用),所以zk适合安装奇数台服务器


节点类型:https://www.cnblogs.com/wzlbigdata/p/8404870.html


命令:https://www.jianshu.com/p/fd859f08cfca
    create -e /... 临时节点生命周期是session quit后再进入会消失
    set /... update_val #修改节点
    get /... watch      #监听节点  可以在另一个会话中测试看效果
    ls /... watch      #监听子节点  只能监听到增删
    ...

Stat结构体
    查看 eg:ls -s /
    1)czxid- 引起这个znode创建的zxid，创建节点的事务的zxid

    2)ctime - znode被创建的毫秒数(从1970年开始)

    3)mzxid - znode最后更新的zxid

    4)mtime - znode最后修改的毫秒数(从1970年开始)

    5)pZxid-znode最后更新的子节点zxid

    6)cversion - znode子节点变化号，znode子节点修改次数

    7)dataversion - znode数据变化号

    8)aclVersion - znode访问控制列表的变化号

    9)ephemeralOwner- 如果是临时节点，这个是znode拥有者的session id。如果不是临时节点则是0

    10)dataLength- znode的数据长度

    11)numChildren - znode子节点数量

监听器原理
    1.首先有一个main线程
    2.在main线程中创建客户端,这时就会创建2个线程:一个负责网络通信(connect),一个负责监听(listener)
    3.通过connect线程将注册的监听事件发送给zookeeper
    4.在zookeeper的注册监听器列表中将注册的监听事件添加到列表中
    5.zookeeper监听到有数据或路径发生变化,就会将这个消息发送给listener线程
    6.listener内部调用了process()方法

常见的监听
    1 监听节点数据的变化     get path [watch]
    2 监听子节点增减的变化    ls path [watch]

写数据流程
    1.client发送写请求到server1
    2.leader写数据  如果client的写请求的不是leader
        那么这个请求会转发到leader leader会将写请求广播给各个server 各个server写成功后就会通知leader
    3.leader 收到大多数server数据写成功了(大多数 eg:2/3),就说明数据写成功了















