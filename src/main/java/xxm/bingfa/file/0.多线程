进程与线程的：
    进程
        操作系统基本运行单位是进程，进程内资源可共享
    线程
        cpu运行单位是线程
    linux进程也属于线程(属于内核线程)

    一个进程可绑定同一个端口(有父子继承关系时 eg:Nginx)


Java创建线程过程
    Start()时才开始创建线程(与操作体统交互) 前面的动作都是代码层面


Thread 的状态改变操作
    1 Thread.sleep(long m) 当前线程调用，当前线程进入TIMED_WAITING 状态,但不释放锁对象，m后自动苏醒进入就绪状态，
        作用：给其他线程窒息性机会的最佳方式
    2 Thread.yield() 当前线程调用，当前线程放弃获取cpu时间片，但不释放资源，由运行状态变为就绪状态，让OS再次需选择线程
        作用：让相同级别的其他线程轮流执行，但并不保证会轮流执行，实际中无法达到让步的效果，因为该线程还有可能被线程调度程序再次选中，
        不会导致阻塞，与sleep()类似，只是不能由用户指定暂停多长时间
    3 t.join()/t.join(long m) 当前线程里调用t线程的join方法，当前线程进入WAITING/TIMED_WAITING 状态，当前线程不会释放已经持有的锁
        线程t执行完毕或者到达m,当前线程就自动进入就绪状态
    4 wait() 当前线程释放锁 进入等待队列 依靠notify() notifyall() 唤醒 或者wait(long m)时间到自动唤醒
    5 notify() 唤醒此对象监听器上等待的单个线程 选择是任意性的 notifyall唤醒 此对象监听队列上的所有线程

